/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;


import Objetos.Mascota;
import Objetos.Partida;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author david
 */
public class SelectorPartida extends javax.swing.JPanel {

    private Partida partidas[];
    private Pantalla_Principal pantallaP;
    private PanelMensaje panel;

    /**
     * Creates new form SelectorPartida
     */
    public SelectorPartida(Partida partida[], Pantalla_Principal p) {
        initComponents();
        this.partidas = partida;
        this.pantallaP = p;
        this.btnEliminarP1.setVisible(false);
        this.btnEliminarP2.setVisible(false);
        this.btnEliminarP3.setVisible(false);
        this.crearLabelsPartidas();
    }

    public void crearLabelsPartidas() {
        int cont = 0;
        //String nombreBtn = "button" + cont;
        for (Partida partida : this.partidas) {
            if (partida != null) {
                if (cont == 0) {
                    this.btnPartida1.setText(partida.getMascotas().toUpperCase());
                    this.lblIconoPerro1.setIcon(new ImageIcon(getClass().getResource("/Elementos_Graficos/IconoPerrito.gif")));
                    this.btnEliminarP1.setVisible(true);
                    this.lblestadoMascota1.setText(partida.getEstado());
                    definirColorEstado(this.lblestadoMascota1.getText(), this.lblestadoMascota1);
                } else if (cont == 1) {
                    this.btnPartida2.setText(partida.getMascotas().toUpperCase());
                    this.lblIconoPerro2.setIcon(new ImageIcon(getClass().getResource("/Elementos_Graficos/IconoPerrito.gif")));
                    this.btnEliminarP2.setVisible(true);
                    this.lblestadoMascota2.setText(partida.getEstado());
                    definirColorEstado(this.lblestadoMascota2.getText(), this.lblestadoMascota2);
                } else if (cont == 2) {
                    this.btnPartida3.setText(partida.getMascotas().toUpperCase());
                    this.lblIconoPerro3.setIcon(new ImageIcon(getClass().getResource("/Elementos_Graficos/IconoPerrito.gif")));
                    this.btnEliminarP3.setVisible(true);
                    this.lblestadoMascota3.setText(partida.getEstado());
                    definirColorEstado(this.lblestadoMascota3.getText(), this.lblestadoMascota3);
                }
            }
            cont++;
        }
    }

    private void definirColorEstado(String estado, JLabel l) {
        if (estado.equalsIgnoreCase("vivo")) {
            l.setForeground(new Color(25, 25, 92));
        } else {
            l.setForeground(new Color(255, 52, 25));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIconoPerro3 = new javax.swing.JLabel();
        lblIconoPerro1 = new javax.swing.JLabel();
        lblIconoPerro2 = new javax.swing.JLabel();
        lblestadoMascota3 = new javax.swing.JLabel();
        lblestadoMascota1 = new javax.swing.JLabel();
        lblestadoMascota2 = new javax.swing.JLabel();
        btnEliminarP3 = new javax.swing.JButton();
        btnEliminarP1 = new javax.swing.JButton();
        btnEliminarP2 = new javax.swing.JButton();
        btnPartida1 = new javax.swing.JButton();
        btnPartida3 = new javax.swing.JButton();
        btnPartida2 = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        lblFondo = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(lblIconoPerro3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 60, 60));
        add(lblIconoPerro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 60, 60));
        add(lblIconoPerro2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 60, 60));

        lblestadoMascota3.setFont(new java.awt.Font("Algerian", 2, 18)); // NOI18N
        lblestadoMascota3.setForeground(new java.awt.Color(0, 0, 0));
        lblestadoMascota3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblestadoMascota3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 90, 20));

        lblestadoMascota1.setFont(new java.awt.Font("Algerian", 2, 18)); // NOI18N
        lblestadoMascota1.setForeground(new java.awt.Color(0, 0, 0));
        lblestadoMascota1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblestadoMascota1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 90, 20));

        lblestadoMascota2.setFont(new java.awt.Font("Algerian", 2, 18)); // NOI18N
        lblestadoMascota2.setForeground(new java.awt.Color(0, 0, 0));
        lblestadoMascota2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblestadoMascota2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 90, 20));

        btnEliminarP3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Apagado.png"))); // NOI18N
        btnEliminarP3.setContentAreaFilled(false);
        btnEliminarP3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarP3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Grande.png"))); // NOI18N
        btnEliminarP3.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar.png"))); // NOI18N
        btnEliminarP3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarP3ActionPerformed(evt);
            }
        });
        add(btnEliminarP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 300, 70, 60));

        btnEliminarP1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Apagado.png"))); // NOI18N
        btnEliminarP1.setContentAreaFilled(false);
        btnEliminarP1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarP1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Grande.png"))); // NOI18N
        btnEliminarP1.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar.png"))); // NOI18N
        btnEliminarP1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarP1ActionPerformed(evt);
            }
        });
        add(btnEliminarP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, 70, 60));

        btnEliminarP2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Apagado.png"))); // NOI18N
        btnEliminarP2.setContentAreaFilled(false);
        btnEliminarP2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarP2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar_Grande.png"))); // NOI18N
        btnEliminarP2.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/borrar.png"))); // NOI18N
        btnEliminarP2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminarP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarP2ActionPerformed(evt);
            }
        });
        add(btnEliminarP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, 70, 60));

        btnPartida1.setBackground(new java.awt.Color(102, 102, 102));
        btnPartida1.setFont(new java.awt.Font("HP Simplified Hans Light", 1, 24)); // NOI18N
        btnPartida1.setForeground(new java.awt.Color(0, 0, 0));
        btnPartida1.setText("NUEVA PARTIDA");
        btnPartida1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnPartida1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPartida1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPartida1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPartida1MouseExited(evt);
            }
        });
        btnPartida1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPartida1ActionPerformed(evt);
            }
        });
        add(btnPartida1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 560, 80));

        btnPartida3.setBackground(new java.awt.Color(102, 102, 102));
        btnPartida3.setFont(new java.awt.Font("HP Simplified Hans Light", 1, 24)); // NOI18N
        btnPartida3.setForeground(new java.awt.Color(0, 0, 0));
        btnPartida3.setText("NUEVA PARTIDA");
        btnPartida3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnPartida3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPartida3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPartida3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPartida3MouseExited(evt);
            }
        });
        btnPartida3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPartida3ActionPerformed(evt);
            }
        });
        add(btnPartida3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 560, 80));

        btnPartida2.setBackground(new java.awt.Color(102, 102, 102));
        btnPartida2.setFont(new java.awt.Font("HP Simplified Hans Light", 1, 24)); // NOI18N
        btnPartida2.setForeground(new java.awt.Color(0, 0, 0));
        btnPartida2.setText("NUEVA PARTIDA");
        btnPartida2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnPartida2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPartida2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPartida2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPartida2MouseExited(evt);
            }
        });
        btnPartida2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPartida2ActionPerformed(evt);
            }
        });
        add(btnPartida2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 560, 80));

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/casa_Apagada.png"))); // NOI18N
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/casa_Grande.png"))); // NOI18N
        btnRegresar.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/casa.png"))); // NOI18N
        btnRegresar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnRegresar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 60, 60));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/fondoPrincipal.gif"))); // NOI18N
        add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 400));
    }// </editor-fold>//GEN-END:initComponents

    private void btnPartida3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPartida3ActionPerformed
        this.eventoBtn(btnPartida3, lblestadoMascota3);
    }//GEN-LAST:event_btnPartida3ActionPerformed

    private void btnPartida2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPartida2ActionPerformed
        this.eventoBtn(btnPartida2, lblestadoMascota2);
    }//GEN-LAST:event_btnPartida2ActionPerformed

    private void btnPartida1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPartida1ActionPerformed
        this.eventoBtn(btnPartida1, lblestadoMascota1);
    }//GEN-LAST:event_btnPartida1ActionPerformed

    private void btnPartida1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida1MouseEntered
        this.btnPartida1.setForeground(Color.white);
        this.btnPartida1.setBackground(new Color(153, 51, 255));
    }//GEN-LAST:event_btnPartida1MouseEntered

    private void btnPartida1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida1MouseExited
        this.btnPartida1.setForeground(Color.black);
        this.btnPartida1.setBackground(new Color(102, 102, 102));
    }//GEN-LAST:event_btnPartida1MouseExited

    private void btnPartida2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida2MouseEntered
        this.btnPartida2.setForeground(Color.white);
        this.btnPartida2.setBackground(new Color(153, 51, 255));
    }//GEN-LAST:event_btnPartida2MouseEntered

    private void btnPartida2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida2MouseExited
        this.btnPartida2.setForeground(Color.black);
        this.btnPartida2.setBackground(new Color(102, 102, 102));
    }//GEN-LAST:event_btnPartida2MouseExited

    private void btnPartida3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida3MouseEntered
        this.btnPartida3.setForeground(Color.white);
        this.btnPartida3.setBackground(new Color(153, 51, 255));
    }//GEN-LAST:event_btnPartida3MouseEntered

    private void btnPartida3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPartida3MouseExited
        this.btnPartida3.setForeground(Color.black);
        this.btnPartida3.setBackground(new Color(102, 102, 102));
    }//GEN-LAST:event_btnPartida3MouseExited

    private void btnEliminarP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarP3ActionPerformed
        String mensaje = "<html>¿ESTAS SEGURO DE <br>ELIMINAR LA PARTIDA?</html>";
        PanelMensaje pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, mensaje, 1);
        pm.setVisible(true);
        if (pm.getResultado() == 0) {
            this.limpiarBtnPartidas(btnPartida3, btnEliminarP3, lblestadoMascota3, lblIconoPerro3);
        }
    }//GEN-LAST:event_btnEliminarP3ActionPerformed

    private void btnEliminarP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarP1ActionPerformed
        String mensaje = "<html>¿ESTAS SEGURO DE <br>ELIMINAR LA PARTIDA?</html>";
        PanelMensaje pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, mensaje, 1);
        pm.setVisible(true);
        if (pm.getResultado() == 0) {
            this.limpiarBtnPartidas(btnPartida1, btnEliminarP1, lblestadoMascota1, lblIconoPerro1);
        }
    }//GEN-LAST:event_btnEliminarP1ActionPerformed

    private void btnEliminarP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarP2ActionPerformed
        String mensaje = "<html>¿ESTAS SEGURO DE <br>ELIMINAR LA PARTIDA?</html>";
        PanelMensaje pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, mensaje, 1);
        pm.setVisible(true);
        if (pm.getResultado() == 0) {
            this.limpiarBtnPartidas(btnPartida2, btnEliminarP2, lblestadoMascota2, lblIconoPerro2);
        }
    }//GEN-LAST:event_btnEliminarP2ActionPerformed
    private void limpiarBtnPartidas(JButton jp, JButton je, JLabel le, JLabel lp) {
        this.eliminarMascotaDeArchivo(jp.getText());
        this.eliminarPartidaDeArchivo(jp.getText());
        this.eliminarLogrosMascotaporArchivo(jp.getText());
        je.setVisible(false);
        le.setText("vivo");
        le.setVisible(false);
        jp.setText("NUEVA PARTIDA");
        lp.setIcon(null);
    }
    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Pantalla_Principal pp = new Pantalla_Principal(this.pantallaP.getMus());
        //pp.getMus().stop();
        // this.pantallaP.getMus().stop();
        this.CambiarPanel(pp.getJpPrincipal());
    }//GEN-LAST:event_btnRegresarActionPerformed
    /*public void eliminarLogros(String nombre) {
        Connection cn = con.conectar();
        PreparedStatement ps = null;
        try {
            String sql = "delete from logrosporMascota where mascota='" + nombre + "';";
            ps = cn.prepareStatement(sql);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error al eliminar Logros");
        }
    }*/
    
    public void eliminarLogrosMascotaporArchivo(String nombreMascota){
        try {
            File inputFile = new File("src/Archivos/logrospormascota.txt");
            File tempFile = new File("temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String lineaActual;

            while ((lineaActual = reader.readLine()) != null) {
                // Dividir la línea en partes
                String[] partes = lineaActual.split(",");
                if (partes.length > 0 && partes[0].equalsIgnoreCase(nombreMascota)) {
                    // Si la línea corresponde a la partida a eliminar, omitirla (no escribirla en el archivo temporal)
                    continue;
                }
                // Escribir la línea en el archivo temporal
                writer.write(lineaActual);
                writer.newLine();
            }

            // Cerrar los lectores y escritores
            reader.close();
            writer.close();

            // Eliminar el archivo original
            if (!inputFile.delete()) {
                System.out.println("No se pudo eliminar el archivo original.");
                return;
            }

            // Renombrar el archivo temporal al nombre del archivo original
            if (!tempFile.renameTo(inputFile)) {
                System.out.println("No se pudo renombrar el archivo temporal.");
            }

            System.out.println("Logro eliminada del archivo correctamente.");

        } catch (IOException e) {
            System.err.println("Error al manipular el archivo de logros: " + e.getMessage());
        }
    }

    /*public void eliminarPartida(String nombre) {
        Connection cn = con.conectar();
        PreparedStatement ps = null;
        try {
            String sql = "delete from partidas where mascota='" + nombre + "';";
            ps = cn.prepareStatement(sql);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error al eliminar Mascota");
        }
    }*/
    public void eliminarPartidaDeArchivo(String nombreMascota) {
        try {
            File inputFile = new File("src/Archivos/partidas.txt");
            File tempFile = new File("temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String lineaActual;

            while ((lineaActual = reader.readLine()) != null) {
                // Dividir la línea en partes
                String[] partes = lineaActual.split(",");
                if (partes.length > 0 && partes[0].equalsIgnoreCase(nombreMascota)) {
                    // Si la línea corresponde a la partida a eliminar, omitirla (no escribirla en el archivo temporal)
                    continue;
                }
                // Escribir la línea en el archivo temporal
                writer.write(lineaActual);
                writer.newLine();
            }

            // Cerrar los lectores y escritores
            reader.close();
            writer.close();

            // Eliminar el archivo original
            if (!inputFile.delete()) {
                System.out.println("No se pudo eliminar el archivo original.");
                return;
            }

            // Renombrar el archivo temporal al nombre del archivo original
            if (!tempFile.renameTo(inputFile)) {
                System.out.println("No se pudo renombrar el archivo temporal.");
            }

            System.out.println("Partida eliminada del archivo correctamente.");

        } catch (IOException e) {
            System.err.println("Error al manipular el archivo de partidas: " + e.getMessage());
        }
    }

    /*public void eliminarMascota(String nombre) {
        Connection cn = con.conectar();
        PreparedStatement ps = null;
        try {
            String sql = "delete from mascotas where nombre='" + nombre + "';";
            ps = cn.prepareStatement(sql);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error al eliminar Mascota");
        }
    }*/
    public void eliminarMascotaDeArchivo(String nombreMascota) {
        try {
            File inputFile = new File("src/Archivos/mascotas.txt");
            File tempFile = new File("temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String lineaActual;

            while ((lineaActual = reader.readLine()) != null) {
                // Dividir la línea en partes
                String[] partes = lineaActual.split(",");
                if (partes.length > 0 && partes[0].equalsIgnoreCase(nombreMascota)) {
                    // Si la línea corresponde a la mascota a eliminar, omitirla (no escribirla en el archivo temporal)
                    continue;
                }
                // Escribir la línea en el archivo temporal
                writer.write(lineaActual);
                writer.newLine();
            }

            // Cerrar los lectores y escritores
            reader.close();
            writer.close();

            // Eliminar el archivo original
            if (!inputFile.delete()) {
                System.out.println("No se pudo eliminar el archivo original.");
                return;
            }

            // Renombrar el archivo temporal al nombre del archivo original
            if (!tempFile.renameTo(inputFile)) {
                System.out.println("No se pudo renombrar el archivo temporal.");
            }

            System.out.println("Mascota eliminada del archivo correctamente.");

        } catch (IOException e) {
            System.err.println("Error al manipular el archivo de mascotas: " + e.getMessage());
        }
    }

    public void eventoBtn(JButton j, JLabel l) {
        if (j.getText().equalsIgnoreCase("nueva partida")) {
            PanelMensaje pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, "", 2);
            pm.setVisible(true);
            String nombre = pm.getNombre();
            //String nombre = JOptionPane.showInputDialog(this, "INGRESE EL NOMBRE DE SU MASCOTA: ");
            if (nombre != null && !nombre.equals("")) {
                Mascota ma = new Mascota(nombre);
                boolean seInsertoM = this.insertarMascotaNuevaEnArchivo(ma);
                boolean seInsertoP = this.insertarPartidaNuevaEnArchivo(ma);
                if (seInsertoM && seInsertoP) {
                    this.CambiarPanel(new Pantalla_Juego(nombre, l.getText(), this.pantallaP));
                }
            } else {
                pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, "<html>!INGRESE UN NOMBRE <br>PORFAVOR¡</html>", 3);
                pm.setVisible(true);
            }
        } else {
            this.CambiarPanel(new Pantalla_Juego(j.getText(), l.getText(), this.pantallaP));
        }
    }

    /*public boolean insertarMascotaNueva(Mascota m) {
        try {
            Conexion con = new Conexion();
            Connection cn = con.conectar();
            String sql = "insert into mascotas( nombre,nivel,"
                    + "vida,energia,hambre,higiene,dinero,exp,cantPizzas,cantHamburguesas,"
                    + "cantSushis, cantPastillas,cantJarabes,cantSueros ) values (?,?,?,?,?,?,?,?,3,1,1,3,1,1)";
            PreparedStatement psd = cn.prepareStatement(sql);
            psd.setString(1, m.getNombre());
            psd.setInt(2, m.getLevel());
            psd.setInt(3, m.getVida());
            psd.setInt(4, m.getEnergía());
            psd.setInt(5, m.getHambre());
            psd.setInt(6, m.getHigiene());
            psd.setInt(7, m.getDinero());
            psd.setInt(8, m.getExp());
            int n = psd.executeUpdate();
            if (n > 0) {
                System.out.println("Nueva Mascota Creada con exito");
                return true;
            }
            return false;
        } catch (SQLException ex) {
            PanelMensaje pm = new PanelMensaje((JFrame) SwingUtilities.getWindowAncestor(this), true, "<html>NOMBRE DE MASCOTA <br>OCUPADO.</html>", 3);
            pm.setVisible(true);
            System.out.println("Error al crear Mascota");
            System.out.println(ex);
            return false;
        }
    }*/
    public boolean insertarMascotaNuevaEnArchivo(Mascota m) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/Archivos/mascotas.txt", true))) {
            // Construir la línea de datos de la mascota
            String linea = m.getNombre() + "," + m.getLevel() + "," + m.getVida() + ","
                    + m.getEnergía() + "," + m.getHambre() + "," + m.getHigiene() + ","
                    + m.getDinero() + "," + m.getExp() + ",3,1,1,3,1,1";

            // Escribir la línea en el archivo
            writer.write(linea);
            writer.newLine(); // Agregar una nueva línea después de cada mascota

            System.out.println("Nueva Mascota creada con éxito");

            return true;
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo de mascotas: " + e.getMessage());
            return false;
        }
    }

    /*public boolean insertarPartidaNueva(Mascota m) {
        try {
            Conexion con = new Conexion();
            Connection cn = con.conectar();
            String sql = "insert into partidas( mascota,"
                    + "estado) values (?,?)";
            PreparedStatement psd = cn.prepareStatement(sql);
            psd.setString(1, m.getNombre());
            psd.setString(2, "vivo");
            int n = psd.executeUpdate();
            if (n > 0) {
                System.out.println("Nueva Partida Creada");
                return true;
            }
            return false;
        } catch (SQLException ex) {
            System.out.println("Error al crear Partida");
            return false;
        }
    }*/
    public boolean insertarPartidaNuevaEnArchivo(Mascota m) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/Archivos/partidas.txt", true))) {
            // Construir la línea de datos de la nueva partida
            String linea = m.getNombre() + ",vivo";

            // Escribir la línea en el archivo
            writer.write(linea);
            writer.newLine(); // Agregar una nueva línea después de cada partida
            System.out.println("Nueva Partida creada y guardada en el archivo.");
            return true;
        } catch (IOException e) {
            System.err.println("Error al escribir en el archivo de partidas: " + e.getMessage());
            return false;
        }
    }

    private void CambiarPanel(JPanel p) {
        //Metodo para cambiar y adaptar el fondo para la pantalla principal del menu
        p.setSize(590, 405);
        p.setLocation(0, 0);
        this.removeAll();
        this.add(p, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        this.revalidate();
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarP1;
    private javax.swing.JButton btnEliminarP2;
    private javax.swing.JButton btnEliminarP3;
    private javax.swing.JButton btnPartida1;
    private javax.swing.JButton btnPartida2;
    private javax.swing.JButton btnPartida3;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblIconoPerro1;
    private javax.swing.JLabel lblIconoPerro2;
    private javax.swing.JLabel lblIconoPerro3;
    private javax.swing.JLabel lblestadoMascota1;
    private javax.swing.JLabel lblestadoMascota2;
    private javax.swing.JLabel lblestadoMascota3;
    // End of variables declaration//GEN-END:variables
}
