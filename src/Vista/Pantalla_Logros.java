/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Objetos.Logro;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author david
 */
public class Pantalla_Logros extends javax.swing.JPanel {

    private Pantalla_Juego juegoPrincipal;
    private ArrayList<Logro> logros;
    private ArrayList<Logro> logrosMascota;

    /**
     * Creates new form Pantalla_Logros
     */
    public Pantalla_Logros(Pantalla_Juego j) {
        initComponents();
        this.pContenedorDeslizable.setVisible(false);
        this.juegoPrincipal = j;
        this.logros = new ArrayList<>();
        this.logrosMascota = new ArrayList<>();
        this.rellenarLogros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogros = new javax.swing.JButton();
        pContenedorDeslizable = new javax.swing.JScrollPane();
        pFondoLogros = new javax.swing.JPanel();
        lblLogros = new javax.swing.JLabel();
        lblFondoLogros = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLogros.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        btnLogros.setForeground(new java.awt.Color(0, 153, 153));
        btnLogros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/iconoTrofeo_Apagado.png"))); // NOI18N
        btnLogros.setText("LOGROS");
        btnLogros.setContentAreaFilled(false);
        btnLogros.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogros.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLogros.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/iconoTrofeo_Grande.png"))); // NOI18N
        btnLogros.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/iconoTrofeo.png"))); // NOI18N
        btnLogros.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnLogros.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLogros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLogrosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLogrosMouseExited(evt);
            }
        });
        btnLogros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogrosActionPerformed(evt);
            }
        });
        add(btnLogros, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, -10, 120, 130));

        pContenedorDeslizable.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pContenedorDeslizable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        pContenedorDeslizable.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pFondoLogros.setBackground(new java.awt.Color(51, 0, 51));

        lblLogros.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblLogros.setForeground(new java.awt.Color(80, 245, 174));
        lblLogros.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogros.setText("LOGROS");

        javax.swing.GroupLayout pFondoLogrosLayout = new javax.swing.GroupLayout(pFondoLogros);
        pFondoLogros.setLayout(pFondoLogrosLayout);
        pFondoLogrosLayout.setHorizontalGroup(
            pFondoLogrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFondoLogrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogros, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        pFondoLogrosLayout.setVerticalGroup(
            pFondoLogrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFondoLogrosLayout.createSequentialGroup()
                .addComponent(lblLogros)
                .addGap(0, 224, Short.MAX_VALUE))
        );

        pContenedorDeslizable.setViewportView(pFondoLogros);

        add(pContenedorDeslizable, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 280, 260));

        lblFondoLogros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos_Graficos/fondo_Logro.gif"))); // NOI18N
        add(lblFondoLogros, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 330));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogrosActionPerformed
        if (this.pContenedorDeslizable.isVisible()) {
            this.pContenedorDeslizable.setVisible(false);
        } else {
            this.pContenedorDeslizable.setVisible(true);
        }
    }//GEN-LAST:event_btnLogrosActionPerformed

    private void btnLogrosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogrosMouseEntered
        this.btnLogros.setForeground(Color.white);
    }//GEN-LAST:event_btnLogrosMouseEntered

    private void btnLogrosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogrosMouseExited
        this.btnLogros.setForeground(new Color(0, 153, 153));

    }//GEN-LAST:event_btnLogrosMouseExited

    public void rellenarLogros() {
        this.cargarLogrosDesdeArchivo();
        this.cargarLogrosMascotaDesdeArchivo();
        this.pFondoLogros.removeAll();
        int posxI = 0, posyI = 32, largoI = 32, anchoI = 32;
        int posxL = 32, posyL = 32, largoL = 215, anchoL = 32;
        for (int i = 0; i < this.logros.size(); i++) {
            JLabel lbllogro = new JLabel(this.logros.get(i).getNombre());
            JLabel lbliconoE;
            String dificultad = this.logros.get(i).getDificultad();
            if (dificultad.equalsIgnoreCase("facil")) {
                lbliconoE = new JLabel(new ImageIcon("src/Elementos_Graficos/estrella.png"));
            } else if (dificultad.equalsIgnoreCase("medio")) {
                lbliconoE = new JLabel(new ImageIcon("src/Elementos_Graficos/dos-estrellas.png"));
            } else {
                lbliconoE = new JLabel(new ImageIcon("src/Elementos_Graficos/tres-estrellas.png"));
            }
            lbliconoE.setBounds(posxI, posyI, largoI, anchoI);
            lbllogro.setBounds(posxL, posyL, largoL, anchoL);
            lbllogro.setForeground(Color.white);
            lbllogro.setHorizontalAlignment(SwingConstants.CENTER);
            lbllogro.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            lbliconoE.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            lbliconoE.setToolTipText(this.logros.get(i).getDificultad());
            lbllogro.setToolTipText(this.logros.get(i).getDescripcion());
            lbllogro.setCursor(new Cursor(Cursor.HAND_CURSOR));
            lbliconoE.setCursor(new Cursor(Cursor.HAND_CURSOR));

            if (this.logrosMascota.contains(this.logros.get(i))) {
                lbllogro.setBackground(new Color(204, 0, 204));
                lbliconoE.setBackground(new Color(204, 0, 204));
                lbllogro.setForeground(Color.black);
            } else {
                lbllogro.setBackground(new Color(51, 0, 51));
                lbliconoE.setBackground(new Color(51, 0, 51));
            }
            lbllogro.setOpaque(true);
            lbliconoE.setOpaque(true);
            lbllogro.repaint();
            lbliconoE.repaint();
            pFondoLogros.add(lbliconoE);
            pFondoLogros.add(lbllogro);
            posyI = posyI + 32;
            posyL = posyL + 32;
        }
        int alturaNecesaria = posyL;
        int alturaActual = pFondoLogros.getHeight();

        // Ajustar la altura del panel si es necesario
        if (alturaNecesaria > alturaActual) {
            pFondoLogros.setPreferredSize(new Dimension(pFondoLogros.getWidth(), alturaNecesaria));
            pFondoLogros.revalidate(); // Actualizar el layout del panel
        }
        pFondoLogros.repaint();
    }

    /*public void obtenerLogros() {
        try {
            this.logros.clear();
            this.con.conectar();
            Connection cn = con.conectar();
            String sql = "select * from logros";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                String descripcion = rs.getString("descripcion");
                String dificultad = rs.getString("dificultad");
                Logro l = new Logro(nombre, descripcion, dificultad);
                this.logros.add(l);
            }
        } catch (SQLException ex) {
            System.out.println("Error al obtener Logros");
        }
    }*/
    public void cargarLogrosDesdeArchivo() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Archivos/logros.txt"))) {
            String linea;
            reader.readLine();
            // Limpiar la lista de logros antes de cargar nuevos logros desde el archivo
            this.logros.clear();

            while ((linea = reader.readLine()) != null) {
                String[] partes = linea.split(",");

                if (partes.length >= 3) {
                    String nombre = partes[0];
                    String descripcion = partes[1];
                    String dificultad = partes[2];

                    // Crear instancia de Logro y agregarlo a la lista de logros en la clase
                    Logro logro = new Logro(nombre, descripcion, dificultad);
                    this.logros.add(logro);
                }
            }

            System.out.println("Logros cargados desde el archivo correctamente.");
        } catch (IOException e) {
            System.err.println("Error al leer el archivo de logros: " + e.getMessage());
        }
    }

    /*public void obtenerLogrosMascota() {
        try {
            this.con.conectar();
            this.logrosMascota.clear();
            Connection cn = con.conectar();
            String sql = "select * from logrosporMascota where mascota = '"
                    + this.juegoPrincipal.getMascota().getNombre() + "';";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String nombre = rs.getString("nombrelogro");
                String descripcion = rs.getString("descripcion");
                String dificultad = rs.getString("dificultad");
                Logro l = new Logro(nombre, descripcion, dificultad);
                this.logrosMascota.add(l);
                //System.out.println(l.getNombre());
            }
        } catch (SQLException ex) {
            System.out.println("Error al obtener Logros");
        }
    }*/
    public void cargarLogrosMascotaDesdeArchivo() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Archivos/logrospormascota.txt"))) {
            String linea;
            reader.readLine();
            // Limpiar la lista de logros de la mascota antes de cargar nuevos logros
            this.logrosMascota.clear();

            while ((linea = reader.readLine()) != null) {
                String[] partes = linea.split(",");

                if (partes.length >= 4 && partes[0].equalsIgnoreCase(this.juegoPrincipal.getMascota().getNombre())) {
                    String nombreLogro = partes[1];
                    String descripcion = partes[2];
                    String dificultad = partes[3];

                    // Crear instancia de Logro y agregarlo a la lista de logros de la mascota
                    Logro logro = new Logro(nombreLogro, descripcion, dificultad);
                    this.logrosMascota.add(logro);
                }
            }

            System.out.println("Logros de la mascota cargados desde el archivo correctamente.");
        } catch (IOException e) {
            System.err.println("Error al leer el archivo de logros de la mascota: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogros;
    private javax.swing.JLabel lblFondoLogros;
    private javax.swing.JLabel lblLogros;
    private javax.swing.JScrollPane pContenedorDeslizable;
    private javax.swing.JPanel pFondoLogros;
    // End of variables declaration//GEN-END:variables
}
